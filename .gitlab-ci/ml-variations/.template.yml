stages:
  - Build
  - Test
  - Push


default:
  image: docker:20.10.22-git
  services:
    - docker:20.10.22-dind
  tags:
    - privileged
  before_script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY


variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: /certs
  GIT_SUBMODULE_STRATEGY: recursive
  IMAGE_BASE: $REGISTRY_IMAGE
  IMAGE_BASE_CI: $CI_REGISTRY_IMAGE


.docker-build:
  script:
    - >
        docker buildx build
        --pull
        --push
        --cache-from type=registry,ref=$IMAGE_CACHE
        --cache-to type=inline
        --platform $PLATFORM
        --build-arg BASE_IMAGE_TYPE=$BASE_IMAGE_TYPE
        --build-arg UBUNTU_VERSION=$UBUNTU_VERSION
        --build-arg ROS_VERSION=$ROS_VERSION
        --build-arg ROS_DISTRO=$ROS_DISTRO
        --build-arg ROS_PACKAGE=$ROS_PACKAGE
        --build-arg ROS_BUILD_FROM_SRC=$ROS_BUILD_FROM_SRC
        --build-arg TORCH_VERSION=$TORCH_VERSION
        --build-arg TF_VERSION=$TF_VERSION
        --build-arg TRITON_VERSION=$TRITON_VERSION
        --tag $IMAGE .

.docker-push-manifest:
  script:
    - |-
      if [[ "${DISABLE_AMD64}" == "true" ]] || [[ "${DISABLE_PLAIN_AMD64}" == "true" && "${IMAGE_TYPE}" == "plain" ]] || [[ "${DISABLE_CUDA_AMD64}" == "true" && "${IMAGE_TYPE}" == "cuda" ]] || [[ "${DISABLE_TENSORRT_AMD64}" == "true" && "${IMAGE_TYPE}" == "tensorrt" ]] || [[ "${DISABLE_TRITON_AMD64}" == "true" && "${IMAGE_TYPE}" == "triton" ]] || [[ "${DISABLE_TORCH_AMD64}" == "true" && "${IMAGE_TYPE}" == "torch" ]] || [[ "${DISABLE_TF_AMD64}" == "true" && "${IMAGE_TYPE}" == "tf" ]] || [[ "${DISABLE_ML_AMD64}" == "true" && "${IMAGE_TYPE}" == "ml" ]]; then
        AMD64_IS_DISABLED="true"
      fi
      if [[ "${DISABLE_ARM64}" == "true" ]] || [[ "${DISABLE_PLAIN_ARM64}" == "true" && "${IMAGE_TYPE}" == "plain" ]] || [[ "${DISABLE_CUDA_ARM64}" == "true" && "${IMAGE_TYPE}" == "cuda" ]] || [[ "${DISABLE_TENSORRT_ARM64}" == "true" && "${IMAGE_TYPE}" == "tensorrt" ]] || [[ "${DISABLE_TRITON_ARM64}" == "true" && "${IMAGE_TYPE}" == "triton" ]] || [[ "${DISABLE_TORCH_ARM64}" == "true" && "${IMAGE_TYPE}" == "torch" ]] || [[ "${DISABLE_TF_ARM64}" == "true" && "${IMAGE_TYPE}" == "tf" ]] || [[ "${DISABLE_ML_ARM64}" == "true" && "${IMAGE_TYPE}" == "ml" ]]; then
        ARM64_IS_DISABLED="true"
      fi
      if [[ "${AMD64_IS_DISABLED}" != "true" ]]; then
        docker pull ${IMAGE_CI}-amd64
        docker tag ${IMAGE_CI}-amd64 ${IMAGE}-amd64
        docker push ${IMAGE}-amd64
      fi
      if [[ "${ARM64_IS_DISABLED}" != "true" ]]; then
        docker pull ${IMAGE_CI}-arm64
        docker tag ${IMAGE_CI}-arm64 ${IMAGE}-arm64
        docker push ${IMAGE}-arm64
      fi
      if [[ "${AMD64_IS_DISABLED}" != "true" && "${ARM64_IS_DISABLED}" != "true" ]]; then
        docker manifest create ${IMAGE} --amend ${IMAGE}-amd64 --amend ${IMAGE}-arm64
        if [[ ${TAGGED_IMAGE} ]]; then docker manifest create ${TAGGED_IMAGE} --amend ${IMAGE}-amd64 --amend ${IMAGE}-arm64; fi
      elif [[ "${AMD64_IS_DISABLED}" != "true" ]]; then
        docker manifest create ${IMAGE} --amend ${IMAGE}-amd64
        if [[ ${TAGGED_IMAGE} ]]; then docker manifest create ${TAGGED_IMAGE} --amend ${IMAGE}-amd64; fi
      elif [[ "${ARM64_IS_DISABLED}" != "true" ]]; then
        docker manifest create ${IMAGE} --amend ${IMAGE}-arm64
        if [[ ${TAGGED_IMAGE} ]]; then docker manifest create ${TAGGED_IMAGE} --amend ${IMAGE}-arm64; fi
      fi
    - docker manifest push ${IMAGE}
    - if [[ ${TAGGED_IMAGE} ]]; then docker manifest push ${TAGGED_IMAGE}; fi


build-amd64:
  stage: Build
  tags: [privileged, amd64]
  rules:
    - if: $DISABLE_AMD64 == 'true'
      when: never
    - if: $DISABLE_PLAIN_AMD64 == 'true' && $IMAGE_TYPE == 'plain'
      when: never
    - if: $DISABLE_CUDA_AMD64 == 'true' && $IMAGE_TYPE == 'cuda'
      when: never
    - if: $DISABLE_TENSORRT_AMD64 == 'true' && $IMAGE_TYPE == 'tensorrt'
      when: never
    - if: $DISABLE_TRITON_AMD64 == 'true' && $IMAGE_TYPE == 'triton'
      when: never
    - if: $DISABLE_TORCH_AMD64 == 'true' && $IMAGE_TYPE == 'torch'
      when: never
    - if: $DISABLE_TF_AMD64 == 'true' && $IMAGE_TYPE == 'tf'
      when: never
    - if: $DISABLE_ML_AMD64 == 'true' && $IMAGE_TYPE == 'ml'
      when: never
    - when: on_success
  script:
    - !reference [.docker-build, script]
  variables:
    PLATFORM: linux/amd64
    IMAGE: ${IMAGE_CI}-amd64
    IMAGE_CACHE: ${IMAGE_CI_CACHE}-amd64

build-arm64:
  stage: Build
  tags: [privileged, arm64]
  rules:
    - if: $DISABLE_ARM64 == 'true'
      when: never
    - if: $DISABLE_ARM64 == 'true'
      when: never
    - if: $DISABLE_PLAIN_ARM64 == 'true' && $IMAGE_TYPE == 'plain'
      when: never
    - if: $DISABLE_CUDA_ARM64 == 'true' && $IMAGE_TYPE == 'cuda'
      when: never
    - if: $DISABLE_TENSORRT_ARM64 == 'true' && $IMAGE_TYPE == 'tensorrt'
      when: never
    - if: $DISABLE_TRITON_ARM64 == 'true' && $IMAGE_TYPE == 'triton'
      when: never
    - if: $DISABLE_TORCH_ARM64 == 'true' && $IMAGE_TYPE == 'torch'
      when: never
    - if: $DISABLE_TF_ARM64 == 'true' && $IMAGE_TYPE == 'tf'
      when: never
    - if: $DISABLE_ML_ARM64 == 'true' && $IMAGE_TYPE == 'ml'
      when: never
    - when: on_success
  script:
    - !reference [.docker-build, script]
  variables:
    PLATFORM: linux/arm64
    IMAGE: ${IMAGE_CI}-arm64
    IMAGE_CACHE: ${IMAGE_CI_CACHE}-arm64


push:
  stage: Push
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - !reference [.docker-push-manifest, script]
  variables:
    TAGGED_IMAGE: ${IMAGE}-v${CI_COMMIT_TAG}

push-default-ros-package:
  stage: Push
  needs:
    - job: push
      optional: true
  rules:
    - if: $CI_COMMIT_TAG && $PUSH_AS_DEFAULT_ROS_PACKAGE == 'true' && $DISABLE_PUSH_AS_DEFAULT_ROS_PACKAGE != 'true'
  script:
    - !reference [.docker-push-manifest, script]
  variables:
    IMAGE: ${IMAGE_REPO}:${TAG_DEFAULT_ROS_PACKAGE}

push-latest:
  stage: Push
  needs:
    - job: push
      optional: true
  rules:
    - if: $CI_COMMIT_TAG && $PUSH_AS_LATEST == 'true' && $DISABLE_PUSH_AS_LATEST != 'true'
  script:
    - !reference [.docker-push-manifest, script]
  variables:
    IMAGE: ${IMAGE_REPO}:latest
